// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: can_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_can_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_can_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_can_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_can_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_can_5fmessage_2eproto;
namespace proto_test {
namespace example {
class CanMessage;
struct CanMessageDefaultTypeInternal;
extern CanMessageDefaultTypeInternal _CanMessage_default_instance_;
}  // namespace example
}  // namespace proto_test
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_test::example::CanMessage* Arena::CreateMaybeMessage<::proto_test::example::CanMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_test {
namespace example {

enum CanMessage_CanMessageType : int {
  CanMessage_CanMessageType_UNKNOWN = 0,
  CanMessage_CanMessageType_GETCLAIMEDADDRESSREQUEST = 1,
  CanMessage_CanMessageType_GETCLAIMEDADDRESSRESPONSE = 2,
  CanMessage_CanMessageType_UDSOPENCOMMCHANNELREQUEST = 4,
  CanMessage_CanMessageType_UDSOPENCOMMCHANNELRESPONSE = 5,
  CanMessage_CanMessageType_UDSCLOSECOMMCHANNELREQUEST = 6,
  CanMessage_CanMessageType_UDSCLOSECOMMCHANNELRESPONSE = 7,
  CanMessage_CanMessageType_READDATABYIDENTIFIERREQUEST = 8,
  CanMessage_CanMessageType_READDATABYIDENTIFIERRESPONSE = 10,
  CanMessage_CanMessageType_CanMessage_CanMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CanMessage_CanMessageType_CanMessage_CanMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CanMessage_CanMessageType_IsValid(int value);
constexpr CanMessage_CanMessageType CanMessage_CanMessageType_CanMessageType_MIN = CanMessage_CanMessageType_UNKNOWN;
constexpr CanMessage_CanMessageType CanMessage_CanMessageType_CanMessageType_MAX = CanMessage_CanMessageType_READDATABYIDENTIFIERRESPONSE;
constexpr int CanMessage_CanMessageType_CanMessageType_ARRAYSIZE = CanMessage_CanMessageType_CanMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CanMessage_CanMessageType_descriptor();
template<typename T>
inline const std::string& CanMessage_CanMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CanMessage_CanMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CanMessage_CanMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CanMessage_CanMessageType_descriptor(), enum_t_value);
}
inline bool CanMessage_CanMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CanMessage_CanMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CanMessage_CanMessageType>(
    CanMessage_CanMessageType_descriptor(), name, value);
}
// ===================================================================

class CanMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_test.example.CanMessage) */ {
 public:
  inline CanMessage() : CanMessage(nullptr) {}
  ~CanMessage() override;
  explicit PROTOBUF_CONSTEXPR CanMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanMessage(const CanMessage& from);
  CanMessage(CanMessage&& from) noexcept
    : CanMessage() {
    *this = ::std::move(from);
  }

  inline CanMessage& operator=(const CanMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanMessage& operator=(CanMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanMessage* internal_default_instance() {
    return reinterpret_cast<const CanMessage*>(
               &_CanMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CanMessage& a, CanMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CanMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanMessage& from) {
    CanMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_test.example.CanMessage";
  }
  protected:
  explicit CanMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CanMessage_CanMessageType CanMessageType;
  static constexpr CanMessageType UNKNOWN =
    CanMessage_CanMessageType_UNKNOWN;
  static constexpr CanMessageType GETCLAIMEDADDRESSREQUEST =
    CanMessage_CanMessageType_GETCLAIMEDADDRESSREQUEST;
  static constexpr CanMessageType GETCLAIMEDADDRESSRESPONSE =
    CanMessage_CanMessageType_GETCLAIMEDADDRESSRESPONSE;
  static constexpr CanMessageType UDSOPENCOMMCHANNELREQUEST =
    CanMessage_CanMessageType_UDSOPENCOMMCHANNELREQUEST;
  static constexpr CanMessageType UDSOPENCOMMCHANNELRESPONSE =
    CanMessage_CanMessageType_UDSOPENCOMMCHANNELRESPONSE;
  static constexpr CanMessageType UDSCLOSECOMMCHANNELREQUEST =
    CanMessage_CanMessageType_UDSCLOSECOMMCHANNELREQUEST;
  static constexpr CanMessageType UDSCLOSECOMMCHANNELRESPONSE =
    CanMessage_CanMessageType_UDSCLOSECOMMCHANNELRESPONSE;
  static constexpr CanMessageType READDATABYIDENTIFIERREQUEST =
    CanMessage_CanMessageType_READDATABYIDENTIFIERREQUEST;
  static constexpr CanMessageType READDATABYIDENTIFIERRESPONSE =
    CanMessage_CanMessageType_READDATABYIDENTIFIERRESPONSE;
  static inline bool CanMessageType_IsValid(int value) {
    return CanMessage_CanMessageType_IsValid(value);
  }
  static constexpr CanMessageType CanMessageType_MIN =
    CanMessage_CanMessageType_CanMessageType_MIN;
  static constexpr CanMessageType CanMessageType_MAX =
    CanMessage_CanMessageType_CanMessageType_MAX;
  static constexpr int CanMessageType_ARRAYSIZE =
    CanMessage_CanMessageType_CanMessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CanMessageType_descriptor() {
    return CanMessage_CanMessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& CanMessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CanMessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CanMessageType_Name.");
    return CanMessage_CanMessageType_Name(enum_t_value);
  }
  static inline bool CanMessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CanMessageType* value) {
    return CanMessage_CanMessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessagePayloadFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes message_payload = 2;
  void clear_message_payload();
  const std::string& message_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_payload();
  PROTOBUF_NODISCARD std::string* release_message_payload();
  void set_allocated_message_payload(std::string* message_payload);
  private:
  const std::string& _internal_message_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_payload(const std::string& value);
  std::string* _internal_mutable_message_payload();
  public:

  // .proto_test.example.CanMessage.CanMessageType type = 1;
  void clear_type();
  ::proto_test::example::CanMessage_CanMessageType type() const;
  void set_type(::proto_test::example::CanMessage_CanMessageType value);
  private:
  ::proto_test::example::CanMessage_CanMessageType _internal_type() const;
  void _internal_set_type(::proto_test::example::CanMessage_CanMessageType value);
  public:

  // @@protoc_insertion_point(class_scope:proto_test.example.CanMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_payload_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_can_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CanMessage

// .proto_test.example.CanMessage.CanMessageType type = 1;
inline void CanMessage::clear_type() {
  _impl_.type_ = 0;
}
inline ::proto_test::example::CanMessage_CanMessageType CanMessage::_internal_type() const {
  return static_cast< ::proto_test::example::CanMessage_CanMessageType >(_impl_.type_);
}
inline ::proto_test::example::CanMessage_CanMessageType CanMessage::type() const {
  // @@protoc_insertion_point(field_get:proto_test.example.CanMessage.type)
  return _internal_type();
}
inline void CanMessage::_internal_set_type(::proto_test::example::CanMessage_CanMessageType value) {
  
  _impl_.type_ = value;
}
inline void CanMessage::set_type(::proto_test::example::CanMessage_CanMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto_test.example.CanMessage.type)
}

// bytes message_payload = 2;
inline void CanMessage::clear_message_payload() {
  _impl_.message_payload_.ClearToEmpty();
}
inline const std::string& CanMessage::message_payload() const {
  // @@protoc_insertion_point(field_get:proto_test.example.CanMessage.message_payload)
  return _internal_message_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CanMessage::set_message_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_test.example.CanMessage.message_payload)
}
inline std::string* CanMessage::mutable_message_payload() {
  std::string* _s = _internal_mutable_message_payload();
  // @@protoc_insertion_point(field_mutable:proto_test.example.CanMessage.message_payload)
  return _s;
}
inline const std::string& CanMessage::_internal_message_payload() const {
  return _impl_.message_payload_.Get();
}
inline void CanMessage::_internal_set_message_payload(const std::string& value) {
  
  _impl_.message_payload_.Set(value, GetArenaForAllocation());
}
inline std::string* CanMessage::_internal_mutable_message_payload() {
  
  return _impl_.message_payload_.Mutable(GetArenaForAllocation());
}
inline std::string* CanMessage::release_message_payload() {
  // @@protoc_insertion_point(field_release:proto_test.example.CanMessage.message_payload)
  return _impl_.message_payload_.Release();
}
inline void CanMessage::set_allocated_message_payload(std::string* message_payload) {
  if (message_payload != nullptr) {
    
  } else {
    
  }
  _impl_.message_payload_.SetAllocated(message_payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_payload_.IsDefault()) {
    _impl_.message_payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_test.example.CanMessage.message_payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace example
}  // namespace proto_test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto_test::example::CanMessage_CanMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_test::example::CanMessage_CanMessageType>() {
  return ::proto_test::example::CanMessage_CanMessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_can_5fmessage_2eproto
