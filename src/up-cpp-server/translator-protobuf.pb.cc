// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: translator-protobuf.proto

#include "translator-protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace translator {
PROTOBUF_CONSTEXPR GetClaimedAddressRequest::GetClaimedAddressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.appid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequenceno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetClaimedAddressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClaimedAddressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClaimedAddressRequestDefaultTypeInternal() {}
  union {
    GetClaimedAddressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClaimedAddressRequestDefaultTypeInternal _GetClaimedAddressRequest_default_instance_;
PROTOBUF_CONSTEXPR GetClaimedAddressResponse::GetClaimedAddressResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.appid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequenceno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.claimedaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.responsecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetClaimedAddressResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClaimedAddressResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClaimedAddressResponseDefaultTypeInternal() {}
  union {
    GetClaimedAddressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClaimedAddressResponseDefaultTypeInternal _GetClaimedAddressResponse_default_instance_;
PROTOBUF_CONSTEXPR UDSCANFormat::UDSCANFormat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.canphysreqformat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.canrespusdtformat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UDSCANFormatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UDSCANFormatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UDSCANFormatDefaultTypeInternal() {}
  union {
    UDSCANFormat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UDSCANFormatDefaultTypeInternal _UDSCANFormat_default_instance_;
PROTOBUF_CONSTEXPR UDSOpenCommChannelRequest::UDSOpenCommChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.canformat_)*/{}
  , /*decltype(_impl_.appid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequenceno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tooladdress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ecuaddress_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resourcename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UDSOpenCommChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UDSOpenCommChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UDSOpenCommChannelRequestDefaultTypeInternal() {}
  union {
    UDSOpenCommChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UDSOpenCommChannelRequestDefaultTypeInternal _UDSOpenCommChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR UDSOpenCommChannelResponse::UDSOpenCommChannelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.appid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequenceno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.responsecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UDSOpenCommChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UDSOpenCommChannelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UDSOpenCommChannelResponseDefaultTypeInternal() {}
  union {
    UDSOpenCommChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UDSOpenCommChannelResponseDefaultTypeInternal _UDSOpenCommChannelResponse_default_instance_;
PROTOBUF_CONSTEXPR UDSCloseCommChannelRequest::UDSCloseCommChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.appid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequenceno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UDSCloseCommChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UDSCloseCommChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UDSCloseCommChannelRequestDefaultTypeInternal() {}
  union {
    UDSCloseCommChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UDSCloseCommChannelRequestDefaultTypeInternal _UDSCloseCommChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR UDSCloseCommChannelResponse::UDSCloseCommChannelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.appid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequenceno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.responsecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UDSCloseCommChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UDSCloseCommChannelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UDSCloseCommChannelResponseDefaultTypeInternal() {}
  union {
    UDSCloseCommChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UDSCloseCommChannelResponseDefaultTypeInternal _UDSCloseCommChannelResponse_default_instance_;
PROTOBUF_CONSTEXPR ReadDataByIdentifierRequest::ReadDataByIdentifierRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.did_)*/{}
  , /*decltype(_impl_.appid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequenceno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadDataByIdentifierRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadDataByIdentifierRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadDataByIdentifierRequestDefaultTypeInternal() {}
  union {
    ReadDataByIdentifierRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadDataByIdentifierRequestDefaultTypeInternal _ReadDataByIdentifierRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadResponse::ReadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.did_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.responsecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadResponseDefaultTypeInternal() {}
  union {
    ReadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadResponseDefaultTypeInternal _ReadResponse_default_instance_;
PROTOBUF_CONSTEXPR ReadDataByIdentifierResponse::ReadDataByIdentifierResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.appid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.connectionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequenceno_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.responsecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadDataByIdentifierResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadDataByIdentifierResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadDataByIdentifierResponseDefaultTypeInternal() {}
  union {
    ReadDataByIdentifierResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadDataByIdentifierResponseDefaultTypeInternal _ReadDataByIdentifierResponse_default_instance_;
}  // namespace translator
static ::_pb::Metadata file_level_metadata_translator_2dprotobuf_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_translator_2dprotobuf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_translator_2dprotobuf_2eproto = nullptr;

const uint32_t TableStruct_translator_2dprotobuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::translator::GetClaimedAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::translator::GetClaimedAddressRequest, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::translator::GetClaimedAddressRequest, _impl_.sequenceno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::translator::GetClaimedAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::translator::GetClaimedAddressResponse, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::translator::GetClaimedAddressResponse, _impl_.sequenceno_),
  PROTOBUF_FIELD_OFFSET(::translator::GetClaimedAddressResponse, _impl_.claimedaddress_),
  PROTOBUF_FIELD_OFFSET(::translator::GetClaimedAddressResponse, _impl_.responsecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::translator::UDSCANFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::translator::UDSCANFormat, _impl_.canphysreqformat_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSCANFormat, _impl_.canrespusdtformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelRequest, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelRequest, _impl_.sequenceno_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelRequest, _impl_.tooladdress_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelRequest, _impl_.ecuaddress_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelRequest, _impl_.canformat_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelRequest, _impl_.resourcename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelResponse, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelResponse, _impl_.connectionid_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelResponse, _impl_.sequenceno_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSOpenCommChannelResponse, _impl_.responsecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::translator::UDSCloseCommChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::translator::UDSCloseCommChannelRequest, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSCloseCommChannelRequest, _impl_.connectionid_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSCloseCommChannelRequest, _impl_.sequenceno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::translator::UDSCloseCommChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::translator::UDSCloseCommChannelResponse, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSCloseCommChannelResponse, _impl_.connectionid_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSCloseCommChannelResponse, _impl_.sequenceno_),
  PROTOBUF_FIELD_OFFSET(::translator::UDSCloseCommChannelResponse, _impl_.responsecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierRequest, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierRequest, _impl_.connectionid_),
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierRequest, _impl_.sequenceno_),
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierRequest, _impl_.did_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::translator::ReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::translator::ReadResponse, _impl_.did_),
  PROTOBUF_FIELD_OFFSET(::translator::ReadResponse, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::translator::ReadResponse, _impl_.responsecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierResponse, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierResponse, _impl_.connectionid_),
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierResponse, _impl_.sequenceno_),
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierResponse, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::translator::ReadDataByIdentifierResponse, _impl_.responsecode_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::translator::GetClaimedAddressRequest)},
  { 8, -1, -1, sizeof(::translator::GetClaimedAddressResponse)},
  { 18, -1, -1, sizeof(::translator::UDSCANFormat)},
  { 26, -1, -1, sizeof(::translator::UDSOpenCommChannelRequest)},
  { 38, -1, -1, sizeof(::translator::UDSOpenCommChannelResponse)},
  { 48, -1, -1, sizeof(::translator::UDSCloseCommChannelRequest)},
  { 57, -1, -1, sizeof(::translator::UDSCloseCommChannelResponse)},
  { 67, -1, -1, sizeof(::translator::ReadDataByIdentifierRequest)},
  { 77, -1, -1, sizeof(::translator::ReadResponse)},
  { 86, -1, -1, sizeof(::translator::ReadDataByIdentifierResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::translator::_GetClaimedAddressRequest_default_instance_._instance,
  &::translator::_GetClaimedAddressResponse_default_instance_._instance,
  &::translator::_UDSCANFormat_default_instance_._instance,
  &::translator::_UDSOpenCommChannelRequest_default_instance_._instance,
  &::translator::_UDSOpenCommChannelResponse_default_instance_._instance,
  &::translator::_UDSCloseCommChannelRequest_default_instance_._instance,
  &::translator::_UDSCloseCommChannelResponse_default_instance_._instance,
  &::translator::_ReadDataByIdentifierRequest_default_instance_._instance,
  &::translator::_ReadResponse_default_instance_._instance,
  &::translator::_ReadDataByIdentifierResponse_default_instance_._instance,
};

const char descriptor_table_protodef_translator_2dprotobuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031translator-protobuf.proto\022\ntranslator\""
  "=\n\030GetClaimedAddressRequest\022\r\n\005appID\030\001 \001"
  "(\t\022\022\n\nsequenceNo\030\002 \001(\t\"l\n\031GetClaimedAddr"
  "essResponse\022\r\n\005appID\030\001 \001(\t\022\022\n\nsequenceNo"
  "\030\002 \001(\t\022\026\n\016claimedAddress\030\003 \001(\t\022\024\n\014respon"
  "seCode\030\004 \001(\t\"C\n\014UDSCANFormat\022\030\n\020canPhysR"
  "eqFormat\030\001 \001(\t\022\031\n\021canRespUSDTFormat\030\002 \001("
  "\t\"\252\001\n\031UDSOpenCommChannelRequest\022\r\n\005appID"
  "\030\001 \001(\t\022\022\n\nsequenceNo\030\002 \001(\t\022\023\n\013toolAddres"
  "s\030\003 \001(\t\022\022\n\necuAddress\030\004 \001(\t\022+\n\tcanFormat"
  "\030\005 \003(\0132\030.translator.UDSCANFormat\022\024\n\014reso"
  "urceName\030\006 \001(\t\"k\n\032UDSOpenCommChannelResp"
  "onse\022\r\n\005appID\030\001 \001(\t\022\024\n\014connectionID\030\002 \001("
  "\t\022\022\n\nsequenceNo\030\003 \001(\t\022\024\n\014responseCode\030\004 "
  "\001(\t\"U\n\032UDSCloseCommChannelRequest\022\r\n\005app"
  "ID\030\001 \001(\t\022\024\n\014connectionID\030\002 \001(\t\022\022\n\nsequen"
  "ceNo\030\003 \001(\t\"l\n\033UDSCloseCommChannelRespons"
  "e\022\r\n\005appID\030\001 \001(\t\022\024\n\014connectionID\030\002 \001(\t\022\022"
  "\n\nsequenceNo\030\003 \001(\t\022\024\n\014responseCode\030\004 \001(\t"
  "\"c\n\033ReadDataByIdentifierRequest\022\r\n\005appID"
  "\030\001 \001(\t\022\024\n\014connectionID\030\002 \001(\t\022\022\n\nsequence"
  "No\030\003 \001(\t\022\013\n\003did\030\004 \003(\t\"@\n\014ReadResponse\022\013\n"
  "\003did\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\024\n\014responseCod"
  "e\030\003 \001(\t\"\225\001\n\034ReadDataByIdentifierResponse"
  "\022\r\n\005appID\030\001 \001(\t\022\024\n\014connectionID\030\002 \001(\t\022\022\n"
  "\nsequenceNo\030\003 \001(\t\022&\n\004data\030\004 \003(\0132\030.transl"
  "ator.ReadResponse\022\024\n\014responseCode\030\005 \001(\tb"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_translator_2dprotobuf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_translator_2dprotobuf_2eproto = {
    false, false, 1087, descriptor_table_protodef_translator_2dprotobuf_2eproto,
    "translator-protobuf.proto",
    &descriptor_table_translator_2dprotobuf_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_translator_2dprotobuf_2eproto::offsets,
    file_level_metadata_translator_2dprotobuf_2eproto, file_level_enum_descriptors_translator_2dprotobuf_2eproto,
    file_level_service_descriptors_translator_2dprotobuf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_translator_2dprotobuf_2eproto_getter() {
  return &descriptor_table_translator_2dprotobuf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_translator_2dprotobuf_2eproto(&descriptor_table_translator_2dprotobuf_2eproto);
namespace translator {

// ===================================================================

class GetClaimedAddressRequest::_Internal {
 public:
};

GetClaimedAddressRequest::GetClaimedAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:translator.GetClaimedAddressRequest)
}
GetClaimedAddressRequest::GetClaimedAddressRequest(const GetClaimedAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetClaimedAddressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.sequenceno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    _this->_impl_.appid_.Set(from._internal_appid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequenceno().empty()) {
    _this->_impl_.sequenceno_.Set(from._internal_sequenceno(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:translator.GetClaimedAddressRequest)
}

inline void GetClaimedAddressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.sequenceno_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetClaimedAddressRequest::~GetClaimedAddressRequest() {
  // @@protoc_insertion_point(destructor:translator.GetClaimedAddressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClaimedAddressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.appid_.Destroy();
  _impl_.sequenceno_.Destroy();
}

void GetClaimedAddressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetClaimedAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:translator.GetClaimedAddressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_.ClearToEmpty();
  _impl_.sequenceno_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClaimedAddressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.GetClaimedAddressRequest.appID"));
        } else
          goto handle_unusual;
        continue;
      // string sequenceNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sequenceno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.GetClaimedAddressRequest.sequenceNo"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClaimedAddressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:translator.GetClaimedAddressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.GetClaimedAddressRequest.appID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appid(), target);
  }

  // string sequenceNo = 2;
  if (!this->_internal_sequenceno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequenceno().data(), static_cast<int>(this->_internal_sequenceno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.GetClaimedAddressRequest.sequenceNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sequenceno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:translator.GetClaimedAddressRequest)
  return target;
}

size_t GetClaimedAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:translator.GetClaimedAddressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string sequenceNo = 2;
  if (!this->_internal_sequenceno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequenceno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClaimedAddressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetClaimedAddressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClaimedAddressRequest::GetClassData() const { return &_class_data_; }


void GetClaimedAddressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetClaimedAddressRequest*>(&to_msg);
  auto& from = static_cast<const GetClaimedAddressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:translator.GetClaimedAddressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_appid().empty()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (!from._internal_sequenceno().empty()) {
    _this->_internal_set_sequenceno(from._internal_sequenceno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClaimedAddressRequest::CopyFrom(const GetClaimedAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:translator.GetClaimedAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClaimedAddressRequest::IsInitialized() const {
  return true;
}

void GetClaimedAddressRequest::InternalSwap(GetClaimedAddressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appid_, lhs_arena,
      &other->_impl_.appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequenceno_, lhs_arena,
      &other->_impl_.sequenceno_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClaimedAddressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_translator_2dprotobuf_2eproto_getter, &descriptor_table_translator_2dprotobuf_2eproto_once,
      file_level_metadata_translator_2dprotobuf_2eproto[0]);
}

// ===================================================================

class GetClaimedAddressResponse::_Internal {
 public:
};

GetClaimedAddressResponse::GetClaimedAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:translator.GetClaimedAddressResponse)
}
GetClaimedAddressResponse::GetClaimedAddressResponse(const GetClaimedAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetClaimedAddressResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.sequenceno_){}
    , decltype(_impl_.claimedaddress_){}
    , decltype(_impl_.responsecode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    _this->_impl_.appid_.Set(from._internal_appid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequenceno().empty()) {
    _this->_impl_.sequenceno_.Set(from._internal_sequenceno(), 
      _this->GetArenaForAllocation());
  }
  _impl_.claimedaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.claimedaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_claimedaddress().empty()) {
    _this->_impl_.claimedaddress_.Set(from._internal_claimedaddress(), 
      _this->GetArenaForAllocation());
  }
  _impl_.responsecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_responsecode().empty()) {
    _this->_impl_.responsecode_.Set(from._internal_responsecode(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:translator.GetClaimedAddressResponse)
}

inline void GetClaimedAddressResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.sequenceno_){}
    , decltype(_impl_.claimedaddress_){}
    , decltype(_impl_.responsecode_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.claimedaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.claimedaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.responsecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetClaimedAddressResponse::~GetClaimedAddressResponse() {
  // @@protoc_insertion_point(destructor:translator.GetClaimedAddressResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClaimedAddressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.appid_.Destroy();
  _impl_.sequenceno_.Destroy();
  _impl_.claimedaddress_.Destroy();
  _impl_.responsecode_.Destroy();
}

void GetClaimedAddressResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetClaimedAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:translator.GetClaimedAddressResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_.ClearToEmpty();
  _impl_.sequenceno_.ClearToEmpty();
  _impl_.claimedaddress_.ClearToEmpty();
  _impl_.responsecode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClaimedAddressResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.GetClaimedAddressResponse.appID"));
        } else
          goto handle_unusual;
        continue;
      // string sequenceNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sequenceno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.GetClaimedAddressResponse.sequenceNo"));
        } else
          goto handle_unusual;
        continue;
      // string claimedAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_claimedaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.GetClaimedAddressResponse.claimedAddress"));
        } else
          goto handle_unusual;
        continue;
      // string responseCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_responsecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.GetClaimedAddressResponse.responseCode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClaimedAddressResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:translator.GetClaimedAddressResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.GetClaimedAddressResponse.appID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appid(), target);
  }

  // string sequenceNo = 2;
  if (!this->_internal_sequenceno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequenceno().data(), static_cast<int>(this->_internal_sequenceno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.GetClaimedAddressResponse.sequenceNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sequenceno(), target);
  }

  // string claimedAddress = 3;
  if (!this->_internal_claimedaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_claimedaddress().data(), static_cast<int>(this->_internal_claimedaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.GetClaimedAddressResponse.claimedAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_claimedaddress(), target);
  }

  // string responseCode = 4;
  if (!this->_internal_responsecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responsecode().data(), static_cast<int>(this->_internal_responsecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.GetClaimedAddressResponse.responseCode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_responsecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:translator.GetClaimedAddressResponse)
  return target;
}

size_t GetClaimedAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:translator.GetClaimedAddressResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string sequenceNo = 2;
  if (!this->_internal_sequenceno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequenceno());
  }

  // string claimedAddress = 3;
  if (!this->_internal_claimedaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_claimedaddress());
  }

  // string responseCode = 4;
  if (!this->_internal_responsecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responsecode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClaimedAddressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetClaimedAddressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClaimedAddressResponse::GetClassData() const { return &_class_data_; }


void GetClaimedAddressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetClaimedAddressResponse*>(&to_msg);
  auto& from = static_cast<const GetClaimedAddressResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:translator.GetClaimedAddressResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_appid().empty()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (!from._internal_sequenceno().empty()) {
    _this->_internal_set_sequenceno(from._internal_sequenceno());
  }
  if (!from._internal_claimedaddress().empty()) {
    _this->_internal_set_claimedaddress(from._internal_claimedaddress());
  }
  if (!from._internal_responsecode().empty()) {
    _this->_internal_set_responsecode(from._internal_responsecode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClaimedAddressResponse::CopyFrom(const GetClaimedAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:translator.GetClaimedAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClaimedAddressResponse::IsInitialized() const {
  return true;
}

void GetClaimedAddressResponse::InternalSwap(GetClaimedAddressResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appid_, lhs_arena,
      &other->_impl_.appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequenceno_, lhs_arena,
      &other->_impl_.sequenceno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.claimedaddress_, lhs_arena,
      &other->_impl_.claimedaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.responsecode_, lhs_arena,
      &other->_impl_.responsecode_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClaimedAddressResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_translator_2dprotobuf_2eproto_getter, &descriptor_table_translator_2dprotobuf_2eproto_once,
      file_level_metadata_translator_2dprotobuf_2eproto[1]);
}

// ===================================================================

class UDSCANFormat::_Internal {
 public:
};

UDSCANFormat::UDSCANFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:translator.UDSCANFormat)
}
UDSCANFormat::UDSCANFormat(const UDSCANFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UDSCANFormat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.canphysreqformat_){}
    , decltype(_impl_.canrespusdtformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.canphysreqformat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.canphysreqformat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_canphysreqformat().empty()) {
    _this->_impl_.canphysreqformat_.Set(from._internal_canphysreqformat(), 
      _this->GetArenaForAllocation());
  }
  _impl_.canrespusdtformat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.canrespusdtformat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_canrespusdtformat().empty()) {
    _this->_impl_.canrespusdtformat_.Set(from._internal_canrespusdtformat(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:translator.UDSCANFormat)
}

inline void UDSCANFormat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.canphysreqformat_){}
    , decltype(_impl_.canrespusdtformat_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.canphysreqformat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.canphysreqformat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.canrespusdtformat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.canrespusdtformat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UDSCANFormat::~UDSCANFormat() {
  // @@protoc_insertion_point(destructor:translator.UDSCANFormat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UDSCANFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.canphysreqformat_.Destroy();
  _impl_.canrespusdtformat_.Destroy();
}

void UDSCANFormat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UDSCANFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:translator.UDSCANFormat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.canphysreqformat_.ClearToEmpty();
  _impl_.canrespusdtformat_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDSCANFormat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string canPhysReqFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_canphysreqformat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSCANFormat.canPhysReqFormat"));
        } else
          goto handle_unusual;
        continue;
      // string canRespUSDTFormat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_canrespusdtformat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSCANFormat.canRespUSDTFormat"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDSCANFormat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:translator.UDSCANFormat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string canPhysReqFormat = 1;
  if (!this->_internal_canphysreqformat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_canphysreqformat().data(), static_cast<int>(this->_internal_canphysreqformat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSCANFormat.canPhysReqFormat");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_canphysreqformat(), target);
  }

  // string canRespUSDTFormat = 2;
  if (!this->_internal_canrespusdtformat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_canrespusdtformat().data(), static_cast<int>(this->_internal_canrespusdtformat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSCANFormat.canRespUSDTFormat");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_canrespusdtformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:translator.UDSCANFormat)
  return target;
}

size_t UDSCANFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:translator.UDSCANFormat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string canPhysReqFormat = 1;
  if (!this->_internal_canphysreqformat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_canphysreqformat());
  }

  // string canRespUSDTFormat = 2;
  if (!this->_internal_canrespusdtformat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_canrespusdtformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDSCANFormat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UDSCANFormat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDSCANFormat::GetClassData() const { return &_class_data_; }


void UDSCANFormat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UDSCANFormat*>(&to_msg);
  auto& from = static_cast<const UDSCANFormat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:translator.UDSCANFormat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_canphysreqformat().empty()) {
    _this->_internal_set_canphysreqformat(from._internal_canphysreqformat());
  }
  if (!from._internal_canrespusdtformat().empty()) {
    _this->_internal_set_canrespusdtformat(from._internal_canrespusdtformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDSCANFormat::CopyFrom(const UDSCANFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:translator.UDSCANFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDSCANFormat::IsInitialized() const {
  return true;
}

void UDSCANFormat::InternalSwap(UDSCANFormat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.canphysreqformat_, lhs_arena,
      &other->_impl_.canphysreqformat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.canrespusdtformat_, lhs_arena,
      &other->_impl_.canrespusdtformat_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UDSCANFormat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_translator_2dprotobuf_2eproto_getter, &descriptor_table_translator_2dprotobuf_2eproto_once,
      file_level_metadata_translator_2dprotobuf_2eproto[2]);
}

// ===================================================================

class UDSOpenCommChannelRequest::_Internal {
 public:
};

UDSOpenCommChannelRequest::UDSOpenCommChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:translator.UDSOpenCommChannelRequest)
}
UDSOpenCommChannelRequest::UDSOpenCommChannelRequest(const UDSOpenCommChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UDSOpenCommChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.canformat_){from._impl_.canformat_}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.sequenceno_){}
    , decltype(_impl_.tooladdress_){}
    , decltype(_impl_.ecuaddress_){}
    , decltype(_impl_.resourcename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    _this->_impl_.appid_.Set(from._internal_appid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequenceno().empty()) {
    _this->_impl_.sequenceno_.Set(from._internal_sequenceno(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tooladdress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tooladdress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tooladdress().empty()) {
    _this->_impl_.tooladdress_.Set(from._internal_tooladdress(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ecuaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ecuaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ecuaddress().empty()) {
    _this->_impl_.ecuaddress_.Set(from._internal_ecuaddress(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resourcename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourcename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resourcename().empty()) {
    _this->_impl_.resourcename_.Set(from._internal_resourcename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:translator.UDSOpenCommChannelRequest)
}

inline void UDSOpenCommChannelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.canformat_){arena}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.sequenceno_){}
    , decltype(_impl_.tooladdress_){}
    , decltype(_impl_.ecuaddress_){}
    , decltype(_impl_.resourcename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tooladdress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tooladdress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ecuaddress_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ecuaddress_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resourcename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourcename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UDSOpenCommChannelRequest::~UDSOpenCommChannelRequest() {
  // @@protoc_insertion_point(destructor:translator.UDSOpenCommChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UDSOpenCommChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.canformat_.~RepeatedPtrField();
  _impl_.appid_.Destroy();
  _impl_.sequenceno_.Destroy();
  _impl_.tooladdress_.Destroy();
  _impl_.ecuaddress_.Destroy();
  _impl_.resourcename_.Destroy();
}

void UDSOpenCommChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UDSOpenCommChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:translator.UDSOpenCommChannelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.canformat_.Clear();
  _impl_.appid_.ClearToEmpty();
  _impl_.sequenceno_.ClearToEmpty();
  _impl_.tooladdress_.ClearToEmpty();
  _impl_.ecuaddress_.ClearToEmpty();
  _impl_.resourcename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDSOpenCommChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSOpenCommChannelRequest.appID"));
        } else
          goto handle_unusual;
        continue;
      // string sequenceNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sequenceno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSOpenCommChannelRequest.sequenceNo"));
        } else
          goto handle_unusual;
        continue;
      // string toolAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tooladdress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSOpenCommChannelRequest.toolAddress"));
        } else
          goto handle_unusual;
        continue;
      // string ecuAddress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ecuaddress();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSOpenCommChannelRequest.ecuAddress"));
        } else
          goto handle_unusual;
        continue;
      // repeated .translator.UDSCANFormat canFormat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_canformat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string resourceName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_resourcename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSOpenCommChannelRequest.resourceName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDSOpenCommChannelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:translator.UDSOpenCommChannelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSOpenCommChannelRequest.appID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appid(), target);
  }

  // string sequenceNo = 2;
  if (!this->_internal_sequenceno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequenceno().data(), static_cast<int>(this->_internal_sequenceno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSOpenCommChannelRequest.sequenceNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sequenceno(), target);
  }

  // string toolAddress = 3;
  if (!this->_internal_tooladdress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tooladdress().data(), static_cast<int>(this->_internal_tooladdress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSOpenCommChannelRequest.toolAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tooladdress(), target);
  }

  // string ecuAddress = 4;
  if (!this->_internal_ecuaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ecuaddress().data(), static_cast<int>(this->_internal_ecuaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSOpenCommChannelRequest.ecuAddress");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ecuaddress(), target);
  }

  // repeated .translator.UDSCANFormat canFormat = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_canformat_size()); i < n; i++) {
    const auto& repfield = this->_internal_canformat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string resourceName = 6;
  if (!this->_internal_resourcename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resourcename().data(), static_cast<int>(this->_internal_resourcename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSOpenCommChannelRequest.resourceName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_resourcename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:translator.UDSOpenCommChannelRequest)
  return target;
}

size_t UDSOpenCommChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:translator.UDSOpenCommChannelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .translator.UDSCANFormat canFormat = 5;
  total_size += 1UL * this->_internal_canformat_size();
  for (const auto& msg : this->_impl_.canformat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string sequenceNo = 2;
  if (!this->_internal_sequenceno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequenceno());
  }

  // string toolAddress = 3;
  if (!this->_internal_tooladdress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tooladdress());
  }

  // string ecuAddress = 4;
  if (!this->_internal_ecuaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ecuaddress());
  }

  // string resourceName = 6;
  if (!this->_internal_resourcename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resourcename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDSOpenCommChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UDSOpenCommChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDSOpenCommChannelRequest::GetClassData() const { return &_class_data_; }


void UDSOpenCommChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UDSOpenCommChannelRequest*>(&to_msg);
  auto& from = static_cast<const UDSOpenCommChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:translator.UDSOpenCommChannelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.canformat_.MergeFrom(from._impl_.canformat_);
  if (!from._internal_appid().empty()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (!from._internal_sequenceno().empty()) {
    _this->_internal_set_sequenceno(from._internal_sequenceno());
  }
  if (!from._internal_tooladdress().empty()) {
    _this->_internal_set_tooladdress(from._internal_tooladdress());
  }
  if (!from._internal_ecuaddress().empty()) {
    _this->_internal_set_ecuaddress(from._internal_ecuaddress());
  }
  if (!from._internal_resourcename().empty()) {
    _this->_internal_set_resourcename(from._internal_resourcename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDSOpenCommChannelRequest::CopyFrom(const UDSOpenCommChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:translator.UDSOpenCommChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDSOpenCommChannelRequest::IsInitialized() const {
  return true;
}

void UDSOpenCommChannelRequest::InternalSwap(UDSOpenCommChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.canformat_.InternalSwap(&other->_impl_.canformat_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appid_, lhs_arena,
      &other->_impl_.appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequenceno_, lhs_arena,
      &other->_impl_.sequenceno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tooladdress_, lhs_arena,
      &other->_impl_.tooladdress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ecuaddress_, lhs_arena,
      &other->_impl_.ecuaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resourcename_, lhs_arena,
      &other->_impl_.resourcename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UDSOpenCommChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_translator_2dprotobuf_2eproto_getter, &descriptor_table_translator_2dprotobuf_2eproto_once,
      file_level_metadata_translator_2dprotobuf_2eproto[3]);
}

// ===================================================================

class UDSOpenCommChannelResponse::_Internal {
 public:
};

UDSOpenCommChannelResponse::UDSOpenCommChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:translator.UDSOpenCommChannelResponse)
}
UDSOpenCommChannelResponse::UDSOpenCommChannelResponse(const UDSOpenCommChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UDSOpenCommChannelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.sequenceno_){}
    , decltype(_impl_.responsecode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    _this->_impl_.appid_.Set(from._internal_appid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connectionid().empty()) {
    _this->_impl_.connectionid_.Set(from._internal_connectionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequenceno().empty()) {
    _this->_impl_.sequenceno_.Set(from._internal_sequenceno(), 
      _this->GetArenaForAllocation());
  }
  _impl_.responsecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_responsecode().empty()) {
    _this->_impl_.responsecode_.Set(from._internal_responsecode(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:translator.UDSOpenCommChannelResponse)
}

inline void UDSOpenCommChannelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.sequenceno_){}
    , decltype(_impl_.responsecode_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.responsecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UDSOpenCommChannelResponse::~UDSOpenCommChannelResponse() {
  // @@protoc_insertion_point(destructor:translator.UDSOpenCommChannelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UDSOpenCommChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.appid_.Destroy();
  _impl_.connectionid_.Destroy();
  _impl_.sequenceno_.Destroy();
  _impl_.responsecode_.Destroy();
}

void UDSOpenCommChannelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UDSOpenCommChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:translator.UDSOpenCommChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_.ClearToEmpty();
  _impl_.connectionid_.ClearToEmpty();
  _impl_.sequenceno_.ClearToEmpty();
  _impl_.responsecode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDSOpenCommChannelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSOpenCommChannelResponse.appID"));
        } else
          goto handle_unusual;
        continue;
      // string connectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_connectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSOpenCommChannelResponse.connectionID"));
        } else
          goto handle_unusual;
        continue;
      // string sequenceNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sequenceno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSOpenCommChannelResponse.sequenceNo"));
        } else
          goto handle_unusual;
        continue;
      // string responseCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_responsecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSOpenCommChannelResponse.responseCode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDSOpenCommChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:translator.UDSOpenCommChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSOpenCommChannelResponse.appID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appid(), target);
  }

  // string connectionID = 2;
  if (!this->_internal_connectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectionid().data(), static_cast<int>(this->_internal_connectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSOpenCommChannelResponse.connectionID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_connectionid(), target);
  }

  // string sequenceNo = 3;
  if (!this->_internal_sequenceno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequenceno().data(), static_cast<int>(this->_internal_sequenceno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSOpenCommChannelResponse.sequenceNo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sequenceno(), target);
  }

  // string responseCode = 4;
  if (!this->_internal_responsecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responsecode().data(), static_cast<int>(this->_internal_responsecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSOpenCommChannelResponse.responseCode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_responsecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:translator.UDSOpenCommChannelResponse)
  return target;
}

size_t UDSOpenCommChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:translator.UDSOpenCommChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string connectionID = 2;
  if (!this->_internal_connectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectionid());
  }

  // string sequenceNo = 3;
  if (!this->_internal_sequenceno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequenceno());
  }

  // string responseCode = 4;
  if (!this->_internal_responsecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responsecode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDSOpenCommChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UDSOpenCommChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDSOpenCommChannelResponse::GetClassData() const { return &_class_data_; }


void UDSOpenCommChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UDSOpenCommChannelResponse*>(&to_msg);
  auto& from = static_cast<const UDSOpenCommChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:translator.UDSOpenCommChannelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_appid().empty()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (!from._internal_connectionid().empty()) {
    _this->_internal_set_connectionid(from._internal_connectionid());
  }
  if (!from._internal_sequenceno().empty()) {
    _this->_internal_set_sequenceno(from._internal_sequenceno());
  }
  if (!from._internal_responsecode().empty()) {
    _this->_internal_set_responsecode(from._internal_responsecode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDSOpenCommChannelResponse::CopyFrom(const UDSOpenCommChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:translator.UDSOpenCommChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDSOpenCommChannelResponse::IsInitialized() const {
  return true;
}

void UDSOpenCommChannelResponse::InternalSwap(UDSOpenCommChannelResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appid_, lhs_arena,
      &other->_impl_.appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connectionid_, lhs_arena,
      &other->_impl_.connectionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequenceno_, lhs_arena,
      &other->_impl_.sequenceno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.responsecode_, lhs_arena,
      &other->_impl_.responsecode_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UDSOpenCommChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_translator_2dprotobuf_2eproto_getter, &descriptor_table_translator_2dprotobuf_2eproto_once,
      file_level_metadata_translator_2dprotobuf_2eproto[4]);
}

// ===================================================================

class UDSCloseCommChannelRequest::_Internal {
 public:
};

UDSCloseCommChannelRequest::UDSCloseCommChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:translator.UDSCloseCommChannelRequest)
}
UDSCloseCommChannelRequest::UDSCloseCommChannelRequest(const UDSCloseCommChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UDSCloseCommChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.sequenceno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    _this->_impl_.appid_.Set(from._internal_appid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connectionid().empty()) {
    _this->_impl_.connectionid_.Set(from._internal_connectionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequenceno().empty()) {
    _this->_impl_.sequenceno_.Set(from._internal_sequenceno(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:translator.UDSCloseCommChannelRequest)
}

inline void UDSCloseCommChannelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.sequenceno_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UDSCloseCommChannelRequest::~UDSCloseCommChannelRequest() {
  // @@protoc_insertion_point(destructor:translator.UDSCloseCommChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UDSCloseCommChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.appid_.Destroy();
  _impl_.connectionid_.Destroy();
  _impl_.sequenceno_.Destroy();
}

void UDSCloseCommChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UDSCloseCommChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:translator.UDSCloseCommChannelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_.ClearToEmpty();
  _impl_.connectionid_.ClearToEmpty();
  _impl_.sequenceno_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDSCloseCommChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSCloseCommChannelRequest.appID"));
        } else
          goto handle_unusual;
        continue;
      // string connectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_connectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSCloseCommChannelRequest.connectionID"));
        } else
          goto handle_unusual;
        continue;
      // string sequenceNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sequenceno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSCloseCommChannelRequest.sequenceNo"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDSCloseCommChannelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:translator.UDSCloseCommChannelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSCloseCommChannelRequest.appID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appid(), target);
  }

  // string connectionID = 2;
  if (!this->_internal_connectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectionid().data(), static_cast<int>(this->_internal_connectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSCloseCommChannelRequest.connectionID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_connectionid(), target);
  }

  // string sequenceNo = 3;
  if (!this->_internal_sequenceno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequenceno().data(), static_cast<int>(this->_internal_sequenceno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSCloseCommChannelRequest.sequenceNo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sequenceno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:translator.UDSCloseCommChannelRequest)
  return target;
}

size_t UDSCloseCommChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:translator.UDSCloseCommChannelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string connectionID = 2;
  if (!this->_internal_connectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectionid());
  }

  // string sequenceNo = 3;
  if (!this->_internal_sequenceno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequenceno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDSCloseCommChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UDSCloseCommChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDSCloseCommChannelRequest::GetClassData() const { return &_class_data_; }


void UDSCloseCommChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UDSCloseCommChannelRequest*>(&to_msg);
  auto& from = static_cast<const UDSCloseCommChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:translator.UDSCloseCommChannelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_appid().empty()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (!from._internal_connectionid().empty()) {
    _this->_internal_set_connectionid(from._internal_connectionid());
  }
  if (!from._internal_sequenceno().empty()) {
    _this->_internal_set_sequenceno(from._internal_sequenceno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDSCloseCommChannelRequest::CopyFrom(const UDSCloseCommChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:translator.UDSCloseCommChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDSCloseCommChannelRequest::IsInitialized() const {
  return true;
}

void UDSCloseCommChannelRequest::InternalSwap(UDSCloseCommChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appid_, lhs_arena,
      &other->_impl_.appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connectionid_, lhs_arena,
      &other->_impl_.connectionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequenceno_, lhs_arena,
      &other->_impl_.sequenceno_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UDSCloseCommChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_translator_2dprotobuf_2eproto_getter, &descriptor_table_translator_2dprotobuf_2eproto_once,
      file_level_metadata_translator_2dprotobuf_2eproto[5]);
}

// ===================================================================

class UDSCloseCommChannelResponse::_Internal {
 public:
};

UDSCloseCommChannelResponse::UDSCloseCommChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:translator.UDSCloseCommChannelResponse)
}
UDSCloseCommChannelResponse::UDSCloseCommChannelResponse(const UDSCloseCommChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UDSCloseCommChannelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.sequenceno_){}
    , decltype(_impl_.responsecode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    _this->_impl_.appid_.Set(from._internal_appid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connectionid().empty()) {
    _this->_impl_.connectionid_.Set(from._internal_connectionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequenceno().empty()) {
    _this->_impl_.sequenceno_.Set(from._internal_sequenceno(), 
      _this->GetArenaForAllocation());
  }
  _impl_.responsecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_responsecode().empty()) {
    _this->_impl_.responsecode_.Set(from._internal_responsecode(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:translator.UDSCloseCommChannelResponse)
}

inline void UDSCloseCommChannelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.appid_){}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.sequenceno_){}
    , decltype(_impl_.responsecode_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.responsecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UDSCloseCommChannelResponse::~UDSCloseCommChannelResponse() {
  // @@protoc_insertion_point(destructor:translator.UDSCloseCommChannelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UDSCloseCommChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.appid_.Destroy();
  _impl_.connectionid_.Destroy();
  _impl_.sequenceno_.Destroy();
  _impl_.responsecode_.Destroy();
}

void UDSCloseCommChannelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UDSCloseCommChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:translator.UDSCloseCommChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_.ClearToEmpty();
  _impl_.connectionid_.ClearToEmpty();
  _impl_.sequenceno_.ClearToEmpty();
  _impl_.responsecode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDSCloseCommChannelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSCloseCommChannelResponse.appID"));
        } else
          goto handle_unusual;
        continue;
      // string connectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_connectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSCloseCommChannelResponse.connectionID"));
        } else
          goto handle_unusual;
        continue;
      // string sequenceNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sequenceno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSCloseCommChannelResponse.sequenceNo"));
        } else
          goto handle_unusual;
        continue;
      // string responseCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_responsecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.UDSCloseCommChannelResponse.responseCode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDSCloseCommChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:translator.UDSCloseCommChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSCloseCommChannelResponse.appID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appid(), target);
  }

  // string connectionID = 2;
  if (!this->_internal_connectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectionid().data(), static_cast<int>(this->_internal_connectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSCloseCommChannelResponse.connectionID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_connectionid(), target);
  }

  // string sequenceNo = 3;
  if (!this->_internal_sequenceno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequenceno().data(), static_cast<int>(this->_internal_sequenceno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSCloseCommChannelResponse.sequenceNo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sequenceno(), target);
  }

  // string responseCode = 4;
  if (!this->_internal_responsecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responsecode().data(), static_cast<int>(this->_internal_responsecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.UDSCloseCommChannelResponse.responseCode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_responsecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:translator.UDSCloseCommChannelResponse)
  return target;
}

size_t UDSCloseCommChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:translator.UDSCloseCommChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string connectionID = 2;
  if (!this->_internal_connectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectionid());
  }

  // string sequenceNo = 3;
  if (!this->_internal_sequenceno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequenceno());
  }

  // string responseCode = 4;
  if (!this->_internal_responsecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responsecode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDSCloseCommChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UDSCloseCommChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDSCloseCommChannelResponse::GetClassData() const { return &_class_data_; }


void UDSCloseCommChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UDSCloseCommChannelResponse*>(&to_msg);
  auto& from = static_cast<const UDSCloseCommChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:translator.UDSCloseCommChannelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_appid().empty()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (!from._internal_connectionid().empty()) {
    _this->_internal_set_connectionid(from._internal_connectionid());
  }
  if (!from._internal_sequenceno().empty()) {
    _this->_internal_set_sequenceno(from._internal_sequenceno());
  }
  if (!from._internal_responsecode().empty()) {
    _this->_internal_set_responsecode(from._internal_responsecode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDSCloseCommChannelResponse::CopyFrom(const UDSCloseCommChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:translator.UDSCloseCommChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDSCloseCommChannelResponse::IsInitialized() const {
  return true;
}

void UDSCloseCommChannelResponse::InternalSwap(UDSCloseCommChannelResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appid_, lhs_arena,
      &other->_impl_.appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connectionid_, lhs_arena,
      &other->_impl_.connectionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequenceno_, lhs_arena,
      &other->_impl_.sequenceno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.responsecode_, lhs_arena,
      &other->_impl_.responsecode_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UDSCloseCommChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_translator_2dprotobuf_2eproto_getter, &descriptor_table_translator_2dprotobuf_2eproto_once,
      file_level_metadata_translator_2dprotobuf_2eproto[6]);
}

// ===================================================================

class ReadDataByIdentifierRequest::_Internal {
 public:
};

ReadDataByIdentifierRequest::ReadDataByIdentifierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:translator.ReadDataByIdentifierRequest)
}
ReadDataByIdentifierRequest::ReadDataByIdentifierRequest(const ReadDataByIdentifierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadDataByIdentifierRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.did_){from._impl_.did_}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.sequenceno_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    _this->_impl_.appid_.Set(from._internal_appid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connectionid().empty()) {
    _this->_impl_.connectionid_.Set(from._internal_connectionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequenceno().empty()) {
    _this->_impl_.sequenceno_.Set(from._internal_sequenceno(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:translator.ReadDataByIdentifierRequest)
}

inline void ReadDataByIdentifierRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.did_){arena}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.sequenceno_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReadDataByIdentifierRequest::~ReadDataByIdentifierRequest() {
  // @@protoc_insertion_point(destructor:translator.ReadDataByIdentifierRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadDataByIdentifierRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.did_.~RepeatedPtrField();
  _impl_.appid_.Destroy();
  _impl_.connectionid_.Destroy();
  _impl_.sequenceno_.Destroy();
}

void ReadDataByIdentifierRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadDataByIdentifierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:translator.ReadDataByIdentifierRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.did_.Clear();
  _impl_.appid_.ClearToEmpty();
  _impl_.connectionid_.ClearToEmpty();
  _impl_.sequenceno_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadDataByIdentifierRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.ReadDataByIdentifierRequest.appID"));
        } else
          goto handle_unusual;
        continue;
      // string connectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_connectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.ReadDataByIdentifierRequest.connectionID"));
        } else
          goto handle_unusual;
        continue;
      // string sequenceNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sequenceno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.ReadDataByIdentifierRequest.sequenceNo"));
        } else
          goto handle_unusual;
        continue;
      // repeated string did = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_did();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "translator.ReadDataByIdentifierRequest.did"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadDataByIdentifierRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:translator.ReadDataByIdentifierRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadDataByIdentifierRequest.appID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appid(), target);
  }

  // string connectionID = 2;
  if (!this->_internal_connectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectionid().data(), static_cast<int>(this->_internal_connectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadDataByIdentifierRequest.connectionID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_connectionid(), target);
  }

  // string sequenceNo = 3;
  if (!this->_internal_sequenceno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequenceno().data(), static_cast<int>(this->_internal_sequenceno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadDataByIdentifierRequest.sequenceNo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sequenceno(), target);
  }

  // repeated string did = 4;
  for (int i = 0, n = this->_internal_did_size(); i < n; i++) {
    const auto& s = this->_internal_did(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadDataByIdentifierRequest.did");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:translator.ReadDataByIdentifierRequest)
  return target;
}

size_t ReadDataByIdentifierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:translator.ReadDataByIdentifierRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string did = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.did_.size());
  for (int i = 0, n = _impl_.did_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.did_.Get(i));
  }

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string connectionID = 2;
  if (!this->_internal_connectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectionid());
  }

  // string sequenceNo = 3;
  if (!this->_internal_sequenceno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequenceno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadDataByIdentifierRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadDataByIdentifierRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadDataByIdentifierRequest::GetClassData() const { return &_class_data_; }


void ReadDataByIdentifierRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadDataByIdentifierRequest*>(&to_msg);
  auto& from = static_cast<const ReadDataByIdentifierRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:translator.ReadDataByIdentifierRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.did_.MergeFrom(from._impl_.did_);
  if (!from._internal_appid().empty()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (!from._internal_connectionid().empty()) {
    _this->_internal_set_connectionid(from._internal_connectionid());
  }
  if (!from._internal_sequenceno().empty()) {
    _this->_internal_set_sequenceno(from._internal_sequenceno());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadDataByIdentifierRequest::CopyFrom(const ReadDataByIdentifierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:translator.ReadDataByIdentifierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDataByIdentifierRequest::IsInitialized() const {
  return true;
}

void ReadDataByIdentifierRequest::InternalSwap(ReadDataByIdentifierRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.did_.InternalSwap(&other->_impl_.did_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appid_, lhs_arena,
      &other->_impl_.appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connectionid_, lhs_arena,
      &other->_impl_.connectionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequenceno_, lhs_arena,
      &other->_impl_.sequenceno_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadDataByIdentifierRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_translator_2dprotobuf_2eproto_getter, &descriptor_table_translator_2dprotobuf_2eproto_once,
      file_level_metadata_translator_2dprotobuf_2eproto[7]);
}

// ===================================================================

class ReadResponse::_Internal {
 public:
};

ReadResponse::ReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:translator.ReadResponse)
}
ReadResponse::ReadResponse(const ReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.did_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.responsecode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.did_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.did_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_did().empty()) {
    _this->_impl_.did_.Set(from._internal_did(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.responsecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_responsecode().empty()) {
    _this->_impl_.responsecode_.Set(from._internal_responsecode(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:translator.ReadResponse)
}

inline void ReadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.did_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.responsecode_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.did_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.did_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.responsecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReadResponse::~ReadResponse() {
  // @@protoc_insertion_point(destructor:translator.ReadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.did_.Destroy();
  _impl_.value_.Destroy();
  _impl_.responsecode_.Destroy();
}

void ReadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:translator.ReadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.did_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.responsecode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string did = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_did();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.ReadResponse.did"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.ReadResponse.value"));
        } else
          goto handle_unusual;
        continue;
      // string responseCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_responsecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.ReadResponse.responseCode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:translator.ReadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string did = 1;
  if (!this->_internal_did().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_did().data(), static_cast<int>(this->_internal_did().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadResponse.did");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_did(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadResponse.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string responseCode = 3;
  if (!this->_internal_responsecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responsecode().data(), static_cast<int>(this->_internal_responsecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadResponse.responseCode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_responsecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:translator.ReadResponse)
  return target;
}

size_t ReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:translator.ReadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string did = 1;
  if (!this->_internal_did().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_did());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string responseCode = 3;
  if (!this->_internal_responsecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responsecode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadResponse::GetClassData() const { return &_class_data_; }


void ReadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadResponse*>(&to_msg);
  auto& from = static_cast<const ReadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:translator.ReadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_did().empty()) {
    _this->_internal_set_did(from._internal_did());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_responsecode().empty()) {
    _this->_internal_set_responsecode(from._internal_responsecode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadResponse::CopyFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:translator.ReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResponse::IsInitialized() const {
  return true;
}

void ReadResponse::InternalSwap(ReadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.did_, lhs_arena,
      &other->_impl_.did_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.responsecode_, lhs_arena,
      &other->_impl_.responsecode_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_translator_2dprotobuf_2eproto_getter, &descriptor_table_translator_2dprotobuf_2eproto_once,
      file_level_metadata_translator_2dprotobuf_2eproto[8]);
}

// ===================================================================

class ReadDataByIdentifierResponse::_Internal {
 public:
};

ReadDataByIdentifierResponse::ReadDataByIdentifierResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:translator.ReadDataByIdentifierResponse)
}
ReadDataByIdentifierResponse::ReadDataByIdentifierResponse(const ReadDataByIdentifierResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadDataByIdentifierResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.sequenceno_){}
    , decltype(_impl_.responsecode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    _this->_impl_.appid_.Set(from._internal_appid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connectionid().empty()) {
    _this->_impl_.connectionid_.Set(from._internal_connectionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequenceno().empty()) {
    _this->_impl_.sequenceno_.Set(from._internal_sequenceno(), 
      _this->GetArenaForAllocation());
  }
  _impl_.responsecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_responsecode().empty()) {
    _this->_impl_.responsecode_.Set(from._internal_responsecode(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:translator.ReadDataByIdentifierResponse)
}

inline void ReadDataByIdentifierResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.connectionid_){}
    , decltype(_impl_.sequenceno_){}
    , decltype(_impl_.responsecode_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connectionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.connectionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequenceno_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequenceno_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.responsecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.responsecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReadDataByIdentifierResponse::~ReadDataByIdentifierResponse() {
  // @@protoc_insertion_point(destructor:translator.ReadDataByIdentifierResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadDataByIdentifierResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
  _impl_.appid_.Destroy();
  _impl_.connectionid_.Destroy();
  _impl_.sequenceno_.Destroy();
  _impl_.responsecode_.Destroy();
}

void ReadDataByIdentifierResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadDataByIdentifierResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:translator.ReadDataByIdentifierResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.appid_.ClearToEmpty();
  _impl_.connectionid_.ClearToEmpty();
  _impl_.sequenceno_.ClearToEmpty();
  _impl_.responsecode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadDataByIdentifierResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string appID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_appid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.ReadDataByIdentifierResponse.appID"));
        } else
          goto handle_unusual;
        continue;
      // string connectionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_connectionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.ReadDataByIdentifierResponse.connectionID"));
        } else
          goto handle_unusual;
        continue;
      // string sequenceNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sequenceno();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.ReadDataByIdentifierResponse.sequenceNo"));
        } else
          goto handle_unusual;
        continue;
      // repeated .translator.ReadResponse data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string responseCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_responsecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "translator.ReadDataByIdentifierResponse.responseCode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadDataByIdentifierResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:translator.ReadDataByIdentifierResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadDataByIdentifierResponse.appID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_appid(), target);
  }

  // string connectionID = 2;
  if (!this->_internal_connectionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connectionid().data(), static_cast<int>(this->_internal_connectionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadDataByIdentifierResponse.connectionID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_connectionid(), target);
  }

  // string sequenceNo = 3;
  if (!this->_internal_sequenceno().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequenceno().data(), static_cast<int>(this->_internal_sequenceno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadDataByIdentifierResponse.sequenceNo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sequenceno(), target);
  }

  // repeated .translator.ReadResponse data = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string responseCode = 5;
  if (!this->_internal_responsecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responsecode().data(), static_cast<int>(this->_internal_responsecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "translator.ReadDataByIdentifierResponse.responseCode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_responsecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:translator.ReadDataByIdentifierResponse)
  return target;
}

size_t ReadDataByIdentifierResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:translator.ReadDataByIdentifierResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .translator.ReadResponse data = 4;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string appID = 1;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string connectionID = 2;
  if (!this->_internal_connectionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connectionid());
  }

  // string sequenceNo = 3;
  if (!this->_internal_sequenceno().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequenceno());
  }

  // string responseCode = 5;
  if (!this->_internal_responsecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responsecode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadDataByIdentifierResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadDataByIdentifierResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadDataByIdentifierResponse::GetClassData() const { return &_class_data_; }


void ReadDataByIdentifierResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadDataByIdentifierResponse*>(&to_msg);
  auto& from = static_cast<const ReadDataByIdentifierResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:translator.ReadDataByIdentifierResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_appid().empty()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (!from._internal_connectionid().empty()) {
    _this->_internal_set_connectionid(from._internal_connectionid());
  }
  if (!from._internal_sequenceno().empty()) {
    _this->_internal_set_sequenceno(from._internal_sequenceno());
  }
  if (!from._internal_responsecode().empty()) {
    _this->_internal_set_responsecode(from._internal_responsecode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadDataByIdentifierResponse::CopyFrom(const ReadDataByIdentifierResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:translator.ReadDataByIdentifierResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDataByIdentifierResponse::IsInitialized() const {
  return true;
}

void ReadDataByIdentifierResponse::InternalSwap(ReadDataByIdentifierResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appid_, lhs_arena,
      &other->_impl_.appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.connectionid_, lhs_arena,
      &other->_impl_.connectionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequenceno_, lhs_arena,
      &other->_impl_.sequenceno_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.responsecode_, lhs_arena,
      &other->_impl_.responsecode_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadDataByIdentifierResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_translator_2dprotobuf_2eproto_getter, &descriptor_table_translator_2dprotobuf_2eproto_once,
      file_level_metadata_translator_2dprotobuf_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace translator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::translator::GetClaimedAddressRequest*
Arena::CreateMaybeMessage< ::translator::GetClaimedAddressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::translator::GetClaimedAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::translator::GetClaimedAddressResponse*
Arena::CreateMaybeMessage< ::translator::GetClaimedAddressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::translator::GetClaimedAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::translator::UDSCANFormat*
Arena::CreateMaybeMessage< ::translator::UDSCANFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::translator::UDSCANFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::translator::UDSOpenCommChannelRequest*
Arena::CreateMaybeMessage< ::translator::UDSOpenCommChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::translator::UDSOpenCommChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::translator::UDSOpenCommChannelResponse*
Arena::CreateMaybeMessage< ::translator::UDSOpenCommChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::translator::UDSOpenCommChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::translator::UDSCloseCommChannelRequest*
Arena::CreateMaybeMessage< ::translator::UDSCloseCommChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::translator::UDSCloseCommChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::translator::UDSCloseCommChannelResponse*
Arena::CreateMaybeMessage< ::translator::UDSCloseCommChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::translator::UDSCloseCommChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::translator::ReadDataByIdentifierRequest*
Arena::CreateMaybeMessage< ::translator::ReadDataByIdentifierRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::translator::ReadDataByIdentifierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::translator::ReadResponse*
Arena::CreateMaybeMessage< ::translator::ReadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::translator::ReadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::translator::ReadDataByIdentifierResponse*
Arena::CreateMaybeMessage< ::translator::ReadDataByIdentifierResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::translator::ReadDataByIdentifierResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
